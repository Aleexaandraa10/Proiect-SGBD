-- Ex 10

-- CERINTA:
-- Se solicita crearea unui sistem de gestionare a angajarilor care sa informeze utilizatorul 
-- despre toate operatiile efectuate asupra listei de angajati. 
-- Sistemul trebuie sa afiseze pe ecran detalii despre actiunile efectuate precum:
--      a. Adaugarea unui nou angajat (inregistrarea unei noi angajari).
--              - se va tine cont de faptul ca data angajarii nu poate fi in viitor.
--      b. Eliminarea unui angajat din sistem (prin concediere sau demisie).
--      c. Modificarea informatiilor unui angajat existente in contractul de munca 
--          (precum schimbari in functie, salariu, departament etc.)

---------------------------------------------------------------------------------------------------------
-- A fost implementat un pachet care contine procedurile necesare pentru validarea datei de angajare
-- si inregistrarea detaliilor operatiunilor in tabela trigger_history_angajati.
-- Verificarea datei de angajare a fost realizata prin intermediul unui trigger la nivel de linie,
-- iar ulterior a fost creat un trigger la nivel de comanda pentru a gestiona 
-- inregistrarea operatiunilor efectuate.

alter table angajati
disable all triggers;




CREATE TABLE trigger_history_angajati(
    id_trigger number generated by default as identity primary key,
    tip_comanda varchar2(10),
    data_trigger varchar2(100),
    nume_tabel_modificat varchar2(30)
);


CREATE OR REPLACE PACKAGE pachet_ex10 IS
    PROCEDURE verifica_data_angajarii(data_angajarii date);
    PROCEDURE inserare_date_trigger(comanda in varchar2, tabel in varchar2);
END pachet_ex10;
/

CREATE OR REPLACE PACKAGE BODY pachet_ex10 IS
    procedure verifica_data_angajarii(data_angajarii date) is
    begin
        if data_angajarii > sysdate then
            RAISE_APPLICATION_ERROR(-20010, 'Data angajarii nu poate fi in viitor!');
        end if;
    end verifica_data_angajarii;
    
     
    procedure inserare_date_trigger(comanda in varchar2, tabel in varchar2)
        is
            v_id trigger_history_angajati.id_trigger%type;
            v_comanda varchar2(10);
            v_data varchar2(100);
            v_tabel varchar2(30);
    begin
        insert into trigger_history_angajati(tip_comanda, data_trigger, nume_tabel_modificat)
            values (comanda, to_char(sysdate, 'dd-mon-yyyy hh24:mi'), tabel)
        returning id_trigger into v_id;
    
        select data_trigger, nume_tabel_modificat
        into v_data, v_tabel
        from trigger_history_angajati
        where id_trigger = v_id;
    
        dbms_output.new_line;
        dbms_output.put_line('-------------------------');
        dbms_output.put_line('Ultimul trigger declansat');
        dbms_output.put_line('-------------------------');
        dbms_output.put_line('Tipul comenzii: '||comanda);
        dbms_output.put_line('Data declansarii triggerului: '||v_data);
        dbms_output.put_line('Numele tabelului asupra caruia s-au efectuat operatii: '||v_tabel);
        dbms_output.new_line;
    end inserare_date_trigger;
END pachet_ex10;
/


CREATE OR REPLACE TRIGGER trigger_verif_data_angajarii
BEFORE INSERT on angajati
FOR EACH ROW
BEGIN
    pachet_ex10.verifica_data_angajarii(:NEW.data_angajare);
END;
/


CREATE OR REPLACE TRIGGER trigger_ex10
AFTER INSERT OR DELETE OR UPDATE ON angajati
BEGIN
    IF INSERTING THEN
        pachet_ex10.inserare_date_trigger('INSERT', 'Angajati');
    ELSIF DELETING THEN
        pachet_ex10.inserare_date_trigger('DELETE', 'Angajati');
    ELSIF UPDATING THEN
        pachet_ex10.inserare_date_trigger('UPDATE', 'Angajati');
    END IF;
END;
/


-- verificare inserari
INSERT INTO angajati VALUES ('A28', 'J12', 'D7', 'C10','Florea', 'Alexandra', 2200, TO_DATE('20-DEC-24', 'DD-MON-YY'),'Activ');
INSERT INTO angajati VALUES ('A29', 'J12', 'D7', 'C10','Florea', 'Alexandra', 2200, TO_DATE('05-JUN-25', 'DD-MON-YY'),'Activ');

INSERT INTO angajati VALUES ('A29', 'J12', 'D7', 'C10','XX', 'Alexandra', 2200, TO_DATE('05-JUN-24', 'DD-MON-YY'),'Activ');
INSERT INTO angajati VALUES ('A30', 'J12', 'D7', 'C10','YY', 'Alexandra', 2200, TO_DATE('05-JUN-24', 'DD-MON-YY'),'Activ');

-- verificare update
-- in tabela ANGAJTI nu mai exista angajat cu salariu de 2200 in afara de cei 2 inserati anterior
update angajati 
set cod_job = 'J11'
where salariu_angajat = 2200;

-- verificare delete
delete from angajati
where salariu_angajat = 2200;

select *
from trigger_history_angajati;

select *
from angajati;